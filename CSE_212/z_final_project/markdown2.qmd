---
title: "Linked Lists"
author: "Jayton Crockett"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
    
---

# Stacks

A stack is a linear data structure that follows the Last-In-First-Out (LIFO) principle. In a stack, elements are added and removed from the same end called the "top."

## Basic Operations

A stack supports the following operations:

- **Push**: Adds an element to the top of the stack.
- **Pop**: Removes and returns the element from the top of the stack.
- **Peek**: Returns the element from the top of the stack without removing it.
- **isEmpty**: Checks if the stack is empty.
- **Size**: Returns the number of elements in the stack.

## Implementation in Python

```python
class Stack:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return len(self.items) == 0

    def push(self, item):
        self.items.append(item)

    def pop(self):
        if not self.is_empty():
            return self.items.pop()
        else:
            print("Stack is empty")

    def peek(self):
        if not self.is_empty():
            return self.items[-1]
        else:
            print"Stack is empty")

    def size(self):
        return len(self.items)
```
```python
stack = Stack()
stack.push(10)
stack.push(20)
stack.push(30)

print("Size of the stack:", stack.size())  # Output: 3
print("Top item of the stack:", stack.peek())  # Output: 30

item = stack.pop()
print("Popped item:", item)  # Output: 30

print("Is the stack empty?", stack.is_empty())
```